#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# ------------------------------------------
# Mode finding for binary Laplace GPC 
# ------------------------------------------

mode = function (matrix[double] K, matrix[double] y, matrix[double]lh) 
  return (matrix[double] f, matrix[double] lml) {
  
  K = rand(rows=3, cols=3, min=0.000000001, max=1);
  y = rand(rows=3, cols=1); 
  
  I = diag(matrix(0, rows=nrow(K), cols=1));
  
  # 2. initialized f = 0
  f = matrix(0, rows=3, cols=3);
  
  # take
  D = 1 / (1+exp(-f)); # operation on each element of f 
  
  # repeat..
  i = 1;
  while (i < 10) {
  
    # 4. W = - ∇∇log p(y|f)
    W = D %*% (1 - D); 
    W_sq = W ^ 0.5;
  
    # 5 (b). B = I + W^0.5 K W^0.5
    B = I + W_sq %*% K %*% W_sq;
    
    # 5 (a). L = cholesky( I + W^0.5 K W^0.5)
    L = cholesky( B );
    
    # 6. b = W f + ∇log p(y|f)
    b = W %*% f + D;
  
    # 7. a = b - W^0.5 t(L) \ (L\(W^0.5 K b))
    # a = b - W_sq %*% chol_solve( L, W_sq %*% K %*% b);
    a = b - W_sq %*% solve( t(L), solve(L, W_sq %*% K %*% b) );  
  
    # 8. f = K a
    f = K %*% a;
    
    for(i in 1:3) 
      print("working!");
      
    i = i + 1;
  # 9. until convergence.
  }
  
  # 10. log q(y|K,θ) = - 0.5 t(a) f + log p(y|f) - Σ diag(L)
  lmlh = - 0.5 * t(a) %*% f + llh - sum( diag(L) );
  
  /* - interms of X, the log marginal likelihood.
  # 10. log q(y|X,θ) = - 0.5 t(postf) K^-1 postf + log p(y|postf) - 0.5 log |B|;
  #     where, B = |K|.|K^-1 + W| = |I + W^0.5 K W^0.5|
  
  lmlh = - 0.5 * t(postf) %*% K^-1 %*% postf + llh - 0.5 * log( abs(B) );
  */
}

