#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------


# 1. Implements Branin-Hoo or Branin Function 
# ------------------------------------------------------------
# Reference: https://www.sfu.ca/~ssurjano/branin.html
#
# Description: The Branin, or Branin-Hoo, function has three global minima. 
#
# Input Domain:
# The function is usually evaluated on the square x1 ∈ [-5, 10], x2 ∈ [0, 15].
#
# Global Minimum:
# f(X') = 0.397887, at X' = (-π, 12.275), (-π, 2.275) and (9.42478, 2.475)
#
# -------------------------------------------------------------
# 

Branin_Hoo = function (double x1, double x2, double a, double b, double c, double r, double s, double t)
  return (double out) {
  
  /*
   * INPUTS:
   * x1 -> [-5, 10] (dimension 1)
   * x2 -> [0, 15]  (dimension 2)
   * a  -> 1 
   * b  -> 5.1/(4π^2)
   * c  -> 5/π
   * r  -> 6
   * s  -> 10
   * t  -> 1/(8π)
   *
   * OUTPUT:
   * out -> function value, a scalar
   */
   
   term1 = a * (x2 - b * x1^2 + c * x1 - r) ^ 2;
   term2 = s * (1 - t) * cos(x1) 
  
   out = term1 + term2 + s;
  
}

# 2. Branin-Hoo function rescaled version implementation
# ---------------------------------------------------------
# Description: From Picheny et al. (2012), the following rescaled version is applicable
# in [0, 1]^2 domain. The rescaled form of the function has a mean oof zero and a variance of one.
# ---------------------------------------------------------
#

Branin_Hoo_Rescaled = function (double x1, double x2) 
  return (double out) {
  
  /*
   * INPUTS:
   * x1, x2 -> on  [0, 1]^2 
   *
   * OUTPUT:
   * out -> function value, a scalar
   */
   
   x1 = 15 * x1 - 5; # scaling x1, and reassigining to the scaled value
   x2 = 15 * x2;     # scaling x2, and reassigining to the scaled value
   
   pi = 3.41 # please refer a standard manual for exact value
   
   term1 = (x2 - (5.1 * x1^2 / (4  * pi^2) ) ) ^ 2;
   term2 = (10 - 10 /(8 * pi) ) * cos(x1);
 
   out = ( term1 + term2  - 44.81) / 51.95;
}

# 3. Branin-Hoo function modified version implementation
# -------------------------------------------------------
# Description: For the purpose of Kriging prediction, Forrester et al. (2008) use a modified form of the 
# Branin-Hoo function, in which they add a term (5 * x1) to the  response. As a result, there are two local 
# minima and only one global minimum, making it more representative of engineering functions.
#
# -------------------------------------------------------
#

Branin_Hoo = function (double x1, double x2, double a, double b, double c, double r, double s, double t)
  return (double out) {
  
  /*
   * INPUTS:
   * x1 -> [-5, 10] (dimension 1)
   * x2 -> [0, 15]  (dimension 2)
   * a  -> 1 
   * b  -> 5.1/(4π^2)
   * c  -> 5/π
   * r  -> 6
   * s  -> 10
   * t  -> 1/(8π)
   *
   * OUTPUT:
   * out -> function value, a scalar
   */
   
   term1 = a * (x2 - b * x1^2 + c * x1 - r) ^ 2;
   term2 = s * (1 - t) * cos(x1) 
  
   out = term1 + term2 + s + 5 * x1; # only the (5 * x1) term is added here.. 
  
}
